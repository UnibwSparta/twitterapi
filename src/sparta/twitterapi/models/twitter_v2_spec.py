# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2025-02-24T10:43:59+00:00
"""Manual edits:

Change possible username length from 15 to 20:
pattern=r"^[A-Za-z0-9_]{1,15}$" to pattern=r"^[A-Za-z0-9_]{1,20}$".

Change profile_image_url and profile_banner_url because of blocked users with url length of 0:
class User: profile_image_url and profile_banner_url from Optional[AnyUrl] to Optional[str]

Change country codes to allow upper and lower case:
constr(pattern=r"^[A-Z]{2}$") to constr(pattern=r"^[A-Za-z]{2}$")

Change minimum items in TweetTakedownComplianceSchema and UserTakedownComplianceSchema withheld_in_countries to 0
withheld_in_countries: List[constr(pattern=r"^[A-Za-z]{2}$")] = Field(..., min_length=0)

Make url from UrlFields to str

Add # type: ignore to all lines with confloat, conint, constr
Hint: Use STRG + SHIFT + L
"""
from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import AnyUrl, BaseModel, ConfigDict, Field, RootModel, confloat, conint, constr


class Aggregate(RootModel[int]):
    root: int = Field(..., description="The sum of results returned in this response.")


class AllowDownloadStatus(BaseModel):
    allow_download: Optional[bool] = Field(None, examples=["true"])


class AltText(BaseModel):
    text: Optional[constr(pattern=r"^.{0,1000}$")] = Field(None, description="Alternate text Metadata (Must be <=1000 chars)", examples=["dancing cat"])  # type: ignore


class Data1(BaseModel):
    id: Optional[constr(pattern=r"^[0-9]{1,19}$")] = Field(None, description="The unique identifier of this Bookmark folder.", examples=["1146654567674912769"])  # type: ignore
    name: Optional[str] = None


class BookmarkFoldersResponse(BaseModel):
    data: Optional[Data1] = None


class Data2(BaseModel):
    bookmarked: Optional[bool] = None


class CashtagFields(BaseModel):
    tag: str = Field(..., examples=["TWTR"])


class Reason(Enum):
    official_client_forbidden = "official-client-forbidden"
    client_not_enrolled = "client-not-enrolled"


class ComplianceJobStatus(Enum):
    created = "created"
    in_progress = "in_progress"
    failed = "failed"
    complete = "complete"
    expired = "expired"


class ComplianceJobType(Enum):
    tweets = "tweets"
    users = "users"


class ConnectionIssue(Enum):
    TooManyConnections = "TooManyConnections"
    ProvisioningSubscription = "ProvisioningSubscription"
    RuleConfigurationIssue = "RuleConfigurationIssue"
    RulesInvalidIssue = "RulesInvalidIssue"


class ContextAnnotationDomainFields(BaseModel):
    description: Optional[str] = Field(None, description="Description of the context annotation domain.")
    id: constr(pattern=r"^[0-9]{1,19}$") = Field(..., description="The unique id for a context annotation domain.")  # type: ignore
    name: Optional[str] = Field(None, description="Name of the context annotation domain.")


class ContextAnnotationEntityFields(BaseModel):
    description: Optional[str] = Field(None, description="Description of the context annotation entity.")
    id: constr(pattern=r"^[0-9]{1,19}$") = Field(..., description="The unique id for a context annotation entity.")  # type: ignore
    name: Optional[str] = Field(None, description="Name of the context annotation entity.")


class Type(Enum):
    tweets = "tweets"
    users = "users"


class CreateComplianceJobRequest(BaseModel):
    name: Optional[constr(max_length=64)] = Field(None, description="User-provided name for a compliance job.", examples=["my-job"])  # type: ignore
    resumable: Optional[bool] = Field(None, description="If true, this endpoint will return a pre-signed URL with resumable uploads enabled.")
    type: Type = Field(..., description="Type of compliance job to list.")


class ConversationType(Enum):
    Group = "Group"


class Data4(BaseModel):
    deleted: Optional[bool] = None


class ResourceType(Enum):
    user = "user"
    tweet = "tweet"
    media = "media"
    list = "list"
    space = "space"


class Section(Enum):
    data = "data"
    includes = "includes"


class Error(BaseModel):
    error: Optional[str] = None
    tweets: Optional[List[str]] = None


class MetricValue(BaseModel):
    metric_type: Optional[str] = None
    metric_value: Optional[float] = None


class Timestamp(BaseModel):
    iso8601_time: Optional[str] = None


class Value(BaseModel):
    metric_values: Optional[List[MetricValue]] = None
    timestamp: Optional[Timestamp] = None


class ValueItem(BaseModel):
    metric_type: Optional[str] = None
    metric_value: Optional[float] = None


class EntityIndicesInclusiveExclusive(BaseModel):
    end: conint(ge=0) = Field(..., description="Index (zero-based) at which position this entity ends.  The index is exclusive.", examples=[61])  # type: ignore
    start: conint(ge=0) = Field(..., description="Index (zero-based) at which position this entity starts.  The index is inclusive.", examples=[50])  # type: ignore


class EntityIndicesInclusiveInclusive(BaseModel):
    end: conint(ge=0) = Field(..., description="Index (zero-based) at which position this entity ends.  The index is inclusive.", examples=[61])  # type: ignore
    start: conint(ge=0) = Field(..., description="Index (zero-based) at which position this entity starts.  The index is inclusive.", examples=[50])  # type: ignore


class Error1(BaseModel):
    code: int
    message: str


class FoundMediaOrigin(BaseModel):
    id: Optional[str] = Field(None, description="external_id")
    provider: Optional[str] = Field(None, examples=["giphy"])


class Annotation(EntityIndicesInclusiveInclusive):
    normalized_text: Optional[str] = Field(None, description="Text used to determine annotation.", examples=["Barack Obama"])
    probability: Optional[confloat(ge=0.0, le=1.0)] = Field(None, description="Confidence factor for annotation type.")  # type: ignore
    type: Optional[str] = Field(None, description="Annotation type.", examples=["Person"])


class Type1(Enum):
    Feature = "Feature"


class HashtagFields(BaseModel):
    tag: str = Field(..., description="The text of the Hashtag.", examples=["MondayMotivation"])


class Error2(BaseModel):
    message: Optional[str] = None
    parameters: Optional[Dict[str, List[str]]] = None


class Data5(BaseModel):
    killed_connections: Optional[bool] = None


class ListCreateRequest(BaseModel):
    description: Optional[constr(min_length=0, max_length=100)] = None  # type: ignore
    name: constr(min_length=1, max_length=25)  # type: ignore
    private: Optional[bool] = False


class Data7(BaseModel):
    deleted: Optional[bool] = None


class Data8(BaseModel):
    following: Optional[bool] = None


class Data9(BaseModel):
    is_member: Optional[bool] = None


class ListPinnedRequest(BaseModel):
    list_id: constr(pattern=r"^[0-9]{1,19}$") = Field(..., description="The unique identifier of this List.", examples=["1146654567674912769"])  # type: ignore


class Data10(BaseModel):
    pinned: Optional[bool] = None


class ListUpdateRequest(BaseModel):
    description: Optional[constr(min_length=0, max_length=100)] = None  # type: ignore
    name: Optional[constr(min_length=1, max_length=25)] = None  # type: ignore
    private: Optional[bool] = None


class Data12(BaseModel):
    updated: Optional[bool] = None


class MediaCategory(Enum):
    amplify_video = "amplify_video"
    tweet_gif = "tweet_gif"
    tweet_image = "tweet_image"
    tweet_video = "tweet_video"
    subtitles = "subtitles"


class MediaUploadAppendRequest(BaseModel):
    media: Optional[bytes] = Field(None, description="The file to upload.")


class Data13(BaseModel):
    expires_after_secs: Optional[int] = Field(None, description="Number of seconds after which upload session expires.")
    id: Optional[constr(pattern=r"^[0-9]{1,19}$")] = Field(None, description="The unique identifier of this Media.", examples=["1146654567674912769"])  # type: ignore
    media_key: Optional[constr(pattern=r"^([0-9]+)_([0-9]+)$")] = Field(None, description="The Media Key identifier for this attachment.")  # type: ignore


class Data16(BaseModel):
    muting: Optional[bool] = None


class NewestId(RootModel[str]):
    root: str = Field(..., description="The newest id in this response.")


class NextToken(RootModel[constr(min_length=1)]):  # type: ignore
    root: constr(min_length=1) = Field(..., description="The next token.")  # type: ignore


class NoteClassification(Enum):
    HarmfullyMisleading = "HarmfullyMisleading"
    MisinformedOrPotentiallyMisleading = "MisinformedOrPotentiallyMisleading"
    NotMisleading = "NotMisleading"
    PotentiallyMisleading = "PotentiallyMisleading"


class NoteRatingStatus(Enum):
    CurrentlyRatedHelpful = "CurrentlyRatedHelpful"
    CurrentlyRatedNotHelpful = "CurrentlyRatedNotHelpful"
    InsufficientConsensus = "InsufficientConsensus"
    MinimumRatingsNotMet = "MinimumRatingsNotMet"
    NeedsMoreRatings = "NeedsMoreRatings"


class OldestId(RootModel[str]):
    root: str = Field(..., description="The oldest id in this response.")


class DisconnectType(Enum):
    OperationalDisconnect = "OperationalDisconnect"
    UpstreamOperationalDisconnect = "UpstreamOperationalDisconnect"
    ForceDisconnect = "ForceDisconnect"
    UpstreamUncleanDisconnect = "UpstreamUncleanDisconnect"
    SlowReader = "SlowReader"
    InternalError = "InternalError"
    ClientApplicationStateDegraded = "ClientApplicationStateDegraded"
    InvalidRules = "InvalidRules"


class PaginationToken32(RootModel[constr(min_length=16)]):  # type: ignore
    root: constr(min_length=16) = Field(..., description="A base32 pagination token.")  # type: ignore


class PaginationToken36(RootModel[constr(min_length=1)]):  # type: ignore
    root: constr(min_length=1) = Field(..., description="A base36 pagination token.")  # type: ignore


class PaginationTokenLong(RootModel[constr(min_length=1, max_length=19)]):  # type: ignore
    root: constr(min_length=1, max_length=19) = Field(..., description="A 'long' pagination token.")  # type: ignore


class PersonalizedTrend(BaseModel):
    category: Optional[str] = Field(None, description="Category of this trend.")
    post_count: Optional[int] = Field(None, description="Number of posts pertaining to this trend.")
    trend_name: Optional[str] = Field(None, description="Name of the trend.")
    trending_since: Optional[str] = Field(None, description="Time since this is trending.")


class PlaceType(Enum):
    poi = "poi"
    neighborhood = "neighborhood"
    city = "city"
    admin = "admin"
    country = "country"
    unknown = "unknown"


class Type2(Enum):
    Point = "Point"


class VotingStatus(Enum):
    open = "open"
    closed = "closed"


class PreviousToken(RootModel[constr(min_length=1)]):  # type: ignore
    root: constr(min_length=1) = Field(..., description="The previous token.")  # type: ignore


class Problem(BaseModel):
    detail: Optional[str] = None
    status: Optional[int] = None
    title: str
    type: str


class State(Enum):
    succeeded = "succeeded"
    in_progress = "in_progress"
    pending = "pending"
    failed = "failed"


class ProcessingInfo(BaseModel):
    check_after_secs: Optional[int] = Field(None, description="Number of seconds to check again for status")
    progress_percent: Optional[int] = Field(None, description="Percent of upload progress")
    state: Optional[State] = Field(None, description="State of upload")


class ReplySettings(Enum):
    everyone = "everyone"
    mentionedUsers = "mentionedUsers"
    following = "following"
    other = "other"


class ReplySettingsWithVerifiedUsers(Enum):
    everyone = "everyone"
    mentionedUsers = "mentionedUsers"
    following = "following"
    other = "other"
    subscribers = "subscribers"
    verified = "verified"


class ResourceNotFoundProblem(Problem):
    parameter: constr(min_length=1)  # type: ignore
    resource_id: str
    resource_type: ResourceType
    value: str = Field(..., description="Value will match the schema of the field.")


class ResourceUnauthorizedProblem(Problem):
    parameter: str
    resource_id: str
    resource_type: ResourceType
    section: Section
    value: str


class ResourceUnavailableProblem(Problem):
    parameter: constr(min_length=1)  # type: ignore
    resource_id: str
    resource_type: ResourceType


class ResultCount(RootModel[int]):
    root: int = Field(..., description="The number of results returned in this response.")


class RulesCapProblem(Problem):
    pass


class RulesRequestSummary1(BaseModel):
    created: int = Field(..., description="Number of user-specified stream filtering rules that were created.", examples=[1])
    invalid: int = Field(..., description="Number of invalid user-specified stream filtering rules.", examples=[1])
    not_created: int = Field(..., description="Number of user-specified stream filtering rules that were not created.", examples=[1])
    valid: int = Field(..., description="Number of valid user-specified stream filtering rules.", examples=[1])


class RulesRequestSummary2(BaseModel):
    deleted: int = Field(..., description="Number of user-specified stream filtering rules that were deleted.")
    not_deleted: int = Field(..., description="Number of user-specified stream filtering rules that were not deleted.")


class RulesResponseMetadata(BaseModel):
    next_token: Optional[constr(min_length=1)] = Field(None, description="The next token.")  # type: ignore
    result_count: Optional[int] = Field(None, description="Number of Rules in result set.")
    sent: str
    summary: Optional[Union[RulesRequestSummary1, RulesRequestSummary2]] = None


class State1(Enum):
    live = "live"
    scheduled = "scheduled"
    ended = "ended"


class Topic1(BaseModel):
    description: Optional[str] = Field(None, description="The description of the given topic.")
    id: str = Field(..., description="An ID suitable for use in the REST API.")
    name: str = Field(..., description="The name of the given topic.")


class Sticker(BaseModel):
    aspect_ratio: Optional[float] = None
    group_annotation_id: Optional[float] = None
    id: Optional[str] = None
    sticker_set_annotation_id: Optional[float] = None
    transform_a: Optional[float] = None
    transform_b: Optional[float] = None
    transform_c: Optional[float] = None
    transform_d: Optional[float] = None
    transform_tx: Optional[float] = None
    transform_ty: Optional[float] = None


class StickerInfo(BaseModel):
    stickers: Optional[List[Sticker]] = None


class Subtitle(BaseModel):
    language_code: Optional[constr(pattern=r"^[A-Za-z]{2}$")] = Field(None, description='The language code should be a BCP47 code (e.g. \'en", "sp")')  # type: ignore


class SubtitleDeleteInfo(BaseModel):
    subtitles: Optional[List[Subtitle]] = Field(None, min_length=1)


class Subtitles(BaseModel):
    display_name: Optional[str] = Field(None, description="Language name in a human redable form")
    language_code: Optional[constr(pattern=r"^[A-Za-z]{2}$")] = Field(None, description='The language code should be a BCP47 code (e.g. \'en", "sp")')  # type: ignore
    media_id: Optional[constr(pattern=r"^[0-9]{1,19}$")] = Field(None, description="The unique identifier of this Media.", examples=["1146654567674912769"])  # type: ignore


class Data17(BaseModel):
    associated_subtitles: Optional[List[Subtitles]] = Field(None, min_length=1)
    id: Optional[constr(pattern=r"^[0-9]{1,19}$")] = Field(None, description="The unique identifier of this Media.", examples=["1146654567674912769"])  # type: ignore
    media_category: Optional[MediaCategory] = None


class SubtitlesCreateResponse(BaseModel):
    data: Optional[Data17] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class SubtitlesDeleteRequest(BaseModel):
    media_category: Optional[MediaCategory] = None
    media_id: Optional[constr(pattern=r"^[0-9]{1,19}$")] = Field(None, description="The unique identifier of this Media.", examples=["1146654567674912769"])  # type: ignore
    subtitle_info: Optional[SubtitleDeleteInfo] = None


class DeletedSubtitle(BaseModel):
    language_code: Optional[constr(pattern=r"^[A-Za-z]{2}$")] = Field(None, description='The language code should be a BCP47 code (e.g. \'en", "sp")')  # type: ignore


class Data18(BaseModel):
    deleted_subtitles: Optional[List[DeletedSubtitle]] = Field(None, min_length=1)
    id: Optional[constr(pattern=r"^[0-9]{1,19}$")] = Field(None, description="The unique identifier of this Media.", examples=["1146654567674912769"])  # type: ignore
    media_category: Optional[MediaCategory] = None


class SubtitlesDeleteResponse(BaseModel):
    data: Optional[Data18] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class Trend(BaseModel):
    trend_name: Optional[str] = Field(None, description="Name of the trend.")
    tweet_count: Optional[int] = Field(None, description="Number of Posts in this trend.")


class EditControls(BaseModel):
    editable_until: datetime = Field(..., description="Time when Tweet is no longer editable.", examples=["2021-01-06T18:40:40.000Z"])
    edits_remaining: int = Field(..., description="Number of times this Tweet can be edited.")
    is_edit_eligible: bool = Field(..., description="Indicates if this Tweet is eligible to be edited.", examples=[False])


class NonPublicMetrics(BaseModel):
    impression_count: Optional[int] = Field(None, description="Number of times this Tweet has been viewed.")


class OrganicMetrics(BaseModel):
    impression_count: int = Field(..., description="Number of times this Tweet has been viewed.")
    like_count: int = Field(..., description="Number of times this Tweet has been liked.")
    reply_count: int = Field(..., description="Number of times this Tweet has been replied to.")
    retweet_count: int = Field(..., description="Number of times this Tweet has been Retweeted.")


class PromotedMetrics(BaseModel):
    impression_count: Optional[int] = Field(None, description="Number of times this Tweet has been viewed.")
    like_count: Optional[int] = Field(None, description="Number of times this Tweet has been liked.")
    reply_count: Optional[int] = Field(None, description="Number of times this Tweet has been replied to.")
    retweet_count: Optional[int] = Field(None, description="Number of times this Tweet has been Retweeted.")


class PublicMetrics(BaseModel):
    bookmark_count: int = Field(..., description="Number of times this Tweet has been bookmarked.")
    impression_count: int = Field(..., description="Number of times this Tweet has been viewed.")
    like_count: int = Field(..., description="Number of times this Tweet has been liked.")
    quote_count: Optional[int] = Field(None, description="Number of times this Tweet has been quoted.")
    reply_count: int = Field(..., description="Number of times this Tweet has been replied to.")
    retweet_count: int = Field(..., description="Number of times this Tweet has been Retweeted.")


class Type3(Enum):
    retweeted = "retweeted"
    quoted = "quoted"
    replied_to = "replied_to"


class Scopes(BaseModel):
    followers: Optional[bool] = Field(None, description="Indicates if this Tweet is viewable by followers without the Tweet ID", examples=[False])


class TweetComplianceStreamResponse2(BaseModel):
    errors: List[Problem] = Field(..., min_length=1)


class Geo2(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    place_id: Optional[str] = None


class ReplySettings1(Enum):
    following = "following"
    mentionedUsers = "mentionedUsers"


class Poll1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    duration_minutes: conint(ge=5, le=10080) = Field(..., description="Duration of the poll in minutes.")  # type: ignore
    options: List[constr(min_length=1, max_length=25)] = Field(..., max_length=4, min_length=2)  # type: ignore
    reply_settings: Optional[ReplySettings1] = Field(None, description="Settings to indicate who can reply to the Tweet.")


class ReplySettings2(Enum):
    following = "following"
    mentionedUsers = "mentionedUsers"
    subscribers = "subscribers"


class Data20(BaseModel):
    deleted: bool


class TweetDeleteResponse(BaseModel):
    data: Optional[Data20] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class TweetHideRequest(BaseModel):
    hidden: bool


class Data21(BaseModel):
    hidden: Optional[bool] = None


class TweetHideResponse(BaseModel):
    data: Optional[Data21] = None


class TweetId(RootModel[constr(pattern=r"^[0-9]{1,19}$")]):  # type: ignore
    root: constr(pattern=r"^[0-9]{1,19}$") = Field(  # type: ignore
        ...,
        description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["1346889436626259968"],
    )


class TweetLabelStreamResponse2(BaseModel):
    errors: List[Problem] = Field(..., min_length=1)


class Scope(Enum):
    tweet = "tweet"
    user = "user"


class TweetWithheld(BaseModel):
    copyright: bool = Field(..., description="Indicates if the content is being withheld for on the basis of copyright infringement.")
    country_codes: List[constr(pattern=r"^[A-Za-z]{2}$")] = Field(  # type: ignore
        ..., description="Provides a list of countries where this content is not available.", min_length=1
    )
    scope: Optional[Scope] = Field(None, description="Indicates whether the content being withheld is the `tweet` or a `user`.")


class UnsupportedAuthenticationProblem(Problem):
    pass


class UploadSource(BaseModel):
    text: Optional[str] = Field(None, description="Upload Source")


class UrlImage(BaseModel):
    height: Optional[conint(ge=0)] = Field(None, description="The height of the media in pixels.")  # type: ignore
    url: Optional[AnyUrl] = Field(None, description="A validly formatted URL.", examples=["https://developer.twitter.com/en/docs/twitter-api"])
    width: Optional[conint(ge=0)] = Field(None, description="The width of the media in pixels.")  # type: ignore


class Period(Enum):
    Daily = "Daily"
    Monthly = "Monthly"


class Scope1(Enum):
    Account = "Account"
    Product = "Product"


class UsageCapExceededProblem(Problem):
    period: Optional[Period] = None
    scope: Optional[Scope1] = None


class UsageFields(BaseModel):
    date: Optional[datetime] = Field(None, description="The time period for the usage", examples=["2021-01-06T18:40:40.000Z"])
    usage: Optional[int] = Field(None, description="The usage value")


class ConnectionStatu(Enum):
    follow_request_received = "follow_request_received"
    follow_request_sent = "follow_request_sent"
    blocking = "blocking"
    followed_by = "followed_by"
    following = "following"
    muting = "muting"


class PublicMetrics1(BaseModel):
    followers_count: int = Field(..., description="Number of Users who are following this User.")
    following_count: int = Field(..., description="Number of Users this User is following.")
    like_count: Optional[int] = Field(None, description="The number of likes created by this User.")
    listed_count: int = Field(..., description="The number of lists that include this User.")
    tweet_count: int = Field(..., description="The number of Posts (including Retweets) posted by this User.")


class SubscriptionType(Enum):
    Basic = "Basic"
    Premium = "Premium"
    PremiumPlus = "PremiumPlus"
    None_ = "None"


class VerifiedType(Enum):
    blue = "blue"
    government = "government"
    business = "business"
    none = "none"


class UserComplianceStreamResponse2(BaseModel):
    errors: List[Problem] = Field(..., min_length=1)


class UserId(RootModel[constr(pattern=r"^[0-9]{1,19}$")]):  # type: ignore
    root: constr(pattern=r"^[0-9]{1,19}$") = Field(  # type: ignore
        ...,
        description="Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["2244994945"],
    )


class UserIdMatchesAuthenticatedUser(RootModel[str]):
    root: str = Field(..., description="Unique identifier of this User. The value must be the same as the authenticated user.", examples=["2244994945"])


class User2(BaseModel):
    id: constr(pattern=r"^[0-9]{1,19}$") = Field(  # type: ignore
        ...,
        description="Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["2244994945"],
    )


class UserProfileModificationObjectSchema(BaseModel):
    event_at: datetime = Field(..., description="Event time.", examples=["2021-07-06T18:40:40.000Z"])
    new_value: str
    profile_field: str
    user: User2


class UserScrubGeoObjectSchema(BaseModel):
    event_at: datetime = Field(..., description="Event time.", examples=["2021-07-06T18:40:40.000Z"])
    up_to_tweet_id: constr(pattern=r"^[0-9]{1,19}$") = Field(  # type: ignore
        ...,
        description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["1346889436626259968"],
    )
    user: User2


class UserScrubGeoSchema(BaseModel):
    scrub_geo: UserScrubGeoObjectSchema


class UserSearchQueryVnext(RootModel[constr(pattern=r"^[A-Za-z0-9_\' ]{1,50}$")]):  # type: ignore
    root: constr(pattern=r"^[A-Za-z0-9_\' ]{1,50}$") = Field(..., description="The the search string by which to query for users.")  # type: ignore


class UserTakedownComplianceSchema(BaseModel):
    event_at: datetime = Field(..., description="Event time.", examples=["2021-07-06T18:40:40.000Z"])
    user: User2
    withheld_in_countries: List[constr(pattern=r"^[A-Za-z]{2}$")] = Field(..., min_length=0)  # type: ignore


class Scope2(Enum):
    user = "user"


class UserWithheld(BaseModel):
    country_codes: List[constr(pattern=r"^[A-Za-z]{2}$")] = Field(  # type: ignore
        ..., description="Provides a list of countries where this content is not available.", min_length=1
    )
    scope: Optional[Scope2] = Field(None, description="Indicates that the content being withheld is a `user`.")


class UserWithheldComplianceSchema(BaseModel):
    user_withheld: UserTakedownComplianceSchema


class Data22(BaseModel):
    blocked: Optional[bool] = None


class UsersDMBlockCreateResponse(BaseModel):
    data: Optional[Data22] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class UsersDMUnBlockCreateResponse(BaseModel):
    data: Optional[Data22] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class UsersFollowingCreateRequest(BaseModel):
    target_user_id: constr(pattern=r"^[0-9]{1,19}$") = Field(  # type: ignore
        ...,
        description="Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["2244994945"],
    )


class Data24(BaseModel):
    following: Optional[bool] = None
    pending_follow: Optional[bool] = None


class UsersFollowingCreateResponse(BaseModel):
    data: Optional[Data24] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class Data25(BaseModel):
    following: Optional[bool] = None


class UsersFollowingDeleteResponse(BaseModel):
    data: Optional[Data25] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class UsersLikesCreateRequest(BaseModel):
    tweet_id: constr(pattern=r"^[0-9]{1,19}$") = Field(  # type: ignore
        ...,
        description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["1346889436626259968"],
    )


class Data26(BaseModel):
    liked: Optional[bool] = None


class UsersLikesCreateResponse(BaseModel):
    data: Optional[Data26] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class UsersLikesDeleteResponse(BaseModel):
    data: Optional[Data26] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class UsersRetweetsCreateRequest(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    tweet_id: constr(pattern=r"^[0-9]{1,19}$") = Field(  # type: ignore
        ...,
        description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["1346889436626259968"],
    )


class Data28(BaseModel):
    id: Optional[constr(pattern=r"^[0-9]{1,19}$")] = Field(  # type: ignore
        None,
        description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["1346889436626259968"],
    )
    retweeted: Optional[bool] = None


class UsersRetweetsCreateResponse(BaseModel):
    data: Optional[Data28] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class Data29(BaseModel):
    retweeted: Optional[bool] = None


class UsersRetweetsDeleteResponse(BaseModel):
    data: Optional[Data29] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class Variant(BaseModel):
    bit_rate: Optional[int] = Field(None, description="The bit rate of the media.")
    content_type: Optional[str] = Field(None, description="The content type of the media.")
    url: Optional[AnyUrl] = Field(None, description="The url to the media.")


class NonPublicMetrics1(BaseModel):
    playback_0_count: Optional[int] = Field(None, description="Number of users who made it through 0% of the video.")
    playback_100_count: Optional[int] = Field(None, description="Number of users who made it through 100% of the video.")
    playback_25_count: Optional[int] = Field(None, description="Number of users who made it through 25% of the video.")
    playback_50_count: Optional[int] = Field(None, description="Number of users who made it through 50% of the video.")
    playback_75_count: Optional[int] = Field(None, description="Number of users who made it through 75% of the video.")


class OrganicMetrics1(BaseModel):
    playback_0_count: Optional[int] = Field(None, description="Number of users who made it through 0% of the video.")
    playback_100_count: Optional[int] = Field(None, description="Number of users who made it through 100% of the video.")
    playback_25_count: Optional[int] = Field(None, description="Number of users who made it through 25% of the video.")
    playback_50_count: Optional[int] = Field(None, description="Number of users who made it through 50% of the video.")
    playback_75_count: Optional[int] = Field(None, description="Number of users who made it through 75% of the video.")
    view_count: Optional[int] = Field(None, description="Number of times this video has been viewed.")


class PromotedMetrics1(BaseModel):
    playback_0_count: Optional[int] = Field(None, description="Number of users who made it through 0% of the video.")
    playback_100_count: Optional[int] = Field(None, description="Number of users who made it through 100% of the video.")
    playback_25_count: Optional[int] = Field(None, description="Number of users who made it through 25% of the video.")
    playback_50_count: Optional[int] = Field(None, description="Number of users who made it through 50% of the video.")
    playback_75_count: Optional[int] = Field(None, description="Number of users who made it through 75% of the video.")
    view_count: Optional[int] = Field(None, description="Number of times this video has been viewed.")


class PublicMetrics2(BaseModel):
    view_count: Optional[int] = Field(None, description="Number of times this video has been viewed.")


class AppRulesCount(BaseModel):
    client_app_id: Optional[constr(min_length=1, max_length=19)] = Field(None, description="The ID of the client application")  # type: ignore
    rule_count: Optional[int] = Field(None, description="Number of rules for client application")


class BookmarkAddRequest(BaseModel):
    tweet_id: constr(pattern=r"^[0-9]{1,19}$") = Field(  # type: ignore
        ...,
        description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["1346889436626259968"],
    )


class Data(BaseModel):
    id: Optional[constr(pattern=r"^[0-9]{1,19}$")] = Field(  # type: ignore
        None,
        description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["1346889436626259968"],
    )


class BookmarkFolderPostsResponse(BaseModel):
    data: Optional[Data] = None


class BookmarkMutationResponse(BaseModel):
    data: Optional[Data2] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class CashtagEntity(EntityIndicesInclusiveExclusive, CashtagFields):
    pass


class ClientAppUsage(BaseModel):
    client_app_id: Optional[str] = Field(None, description="The unique identifier for this project")
    usage: Optional[List[UsageFields]] = Field(None, description="The usage value", min_length=1)
    usage_result_count: Optional[int] = Field(None, description="The number of results returned")


class ClientDisconnectedProblem(Problem):
    pass


class ClientForbiddenProblem(Problem):
    reason: Optional[Reason] = None
    registration_url: Optional[AnyUrl] = None


class Community(BaseModel):
    created_at: Optional[datetime] = None
    id: constr(pattern=r"^[0-9]{1,19}$") = Field(..., description="The unique identifier of this Community.", examples=["1146654567674912769"])  # type: ignore
    name: str = Field(..., description="The name of this Community.")


class ComplianceJob(BaseModel):
    created_at: datetime = Field(..., description="Creation time of the compliance job.", examples=["2021-01-06T18:40:40.000Z"])
    download_expires_at: datetime = Field(..., description="Expiration time of the download URL.", examples=["2021-01-06T18:40:40.000Z"])
    download_url: AnyUrl = Field(..., description="URL from which the user will retrieve their compliance results.")
    id: constr(pattern=r"^[0-9]{1,19}$") = Field(..., description="Compliance Job ID.", examples=["1372966999991541762"])  # type: ignore
    name: Optional[constr(max_length=64)] = Field(None, description="User-provided name for a compliance job.", examples=["my-job"])  # type: ignore
    status: ComplianceJobStatus
    type: ComplianceJobType
    upload_expires_at: datetime = Field(..., description="Expiration time of the upload URL.", examples=["2021-01-06T18:40:40.000Z"])
    upload_url: AnyUrl = Field(..., description="URL to which the user will upload their Tweet or user IDs.")


class ConflictProblem(Problem):
    pass


class ConnectionExceptionProblem(Problem):
    connection_issue: Optional[ConnectionIssue] = None


class ContextAnnotation(BaseModel):
    domain: ContextAnnotationDomainFields
    entity: ContextAnnotationEntityFields


class CreateComplianceJobResponse(BaseModel):
    data: Optional[ComplianceJob] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class Data3(BaseModel):
    dm_conversation_id: constr(pattern=r"^([0-9]{1,19}-[0-9]{1,19}|[0-9]{15,19})$") = Field(  # type: ignore
        ...,
        description="Unique identifier of a DM conversation. This can either be a numeric string, or a pair of numeric strings separated by a '-' character in the case of one-on-one DM Conversations.",
        examples=["123123123-456456456"],
    )
    dm_event_id: constr(pattern=r"^[0-9]{1,19}$") = Field(..., description="Unique identifier of a DM Event.", examples=["1146654567674912769"])  # type: ignore


class CreateDmEventResponse(BaseModel):
    data: Optional[Data3] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class DeleteDmResponse(BaseModel):
    data: Optional[Data4] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class Delete(BaseModel):
    ids: Optional[List[constr(pattern=r"^[0-9]{1,19}$")]] = Field(None, description="IDs of all deleted user-specified stream filtering rules.")  # type: ignore
    values: Optional[List[str]] = Field(None, description="Values of all deleted user-specified stream filtering rules.")


class DeleteRulesRequest(BaseModel):
    delete: Delete = Field(..., description="IDs and values of all deleted user-specified stream filtering rules.")


class DisallowedResourceProblem(Problem):
    resource_id: str
    resource_type: ResourceType
    section: Section


class Attachments(BaseModel):
    card_ids: Optional[List[str]] = Field(None, description="A list of card IDs (if cards are attached).", min_length=1)
    media_keys: Optional[List[constr(pattern=r"^([0-9]+)_([0-9]+)$")]] = Field(  # type: ignore
        None, description="A list of Media Keys for each one of the media attachments (if media are attached).", min_length=1
    )


class ReferencedTweet(BaseModel):
    id: constr(pattern=r"^[0-9]{1,19}$") = Field(  # type: ignore
        ...,
        description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["1346889436626259968"],
    )


class DmMediaAttachment(BaseModel):
    media_id: constr(pattern=r"^[0-9]{1,19}$") = Field(..., description="The unique identifier of this Media.", examples=["1146654567674912769"])  # type: ignore


class DuplicateRuleProblem(Problem):
    id: Optional[str] = None
    value: Optional[str] = None


class MetricsTimeSery(BaseModel):
    tweet_id: Optional[constr(pattern=r"^[0-9]{1,19}$")] = Field(  # type: ignore
        None,
        description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["1346889436626259968"],
    )
    value: Optional[Value] = None


class MetricsTotalItem(BaseModel):
    tweet_id: Optional[constr(pattern=r"^[0-9]{1,19}$")] = Field(  # type: ignore
        None,
        description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["1346889436626259968"],
    )
    value: Optional[List[ValueItem]] = Field(None, min_length=1)


class Measurement(BaseModel):
    metrics_time_series: Optional[List[MetricsTimeSery]] = Field(None, min_length=1)
    metrics_total: Optional[List[MetricsTotalItem]] = Field(None, min_length=1)


class Engagement(BaseModel):
    errors: Optional[List[Error]] = Field(None, min_length=1)
    measurement: Optional[Measurement] = None


class FieldUnauthorizedProblem(Problem):
    field: str
    resource_type: ResourceType
    section: Section


class MatchingRule(BaseModel):
    id: constr(pattern=r"^[0-9]{1,19}$") = Field(..., description="Unique identifier of this rule.", examples=["120897978112909812"])  # type: ignore
    tag: Optional[str] = Field(None, description="A tag meant for the labeling of user provided rules.", examples=["Non-retweeted coffee Posts"])


class GenericProblem(Problem):
    pass


class Get2CommunitiesIdResponse(BaseModel):
    data: Optional[Community] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class Meta(BaseModel):
    next_token: Optional[constr(min_length=1)] = Field(None, description="The next token.")  # type: ignore


class Get2CommunitiesSearchResponse(BaseModel):
    data: Optional[List[Community]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    meta: Optional[Meta] = None


class Get2ComplianceJobsIdResponse(BaseModel):
    data: Optional[ComplianceJob] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class Meta1(BaseModel):
    result_count: Optional[int] = Field(None, description="The number of results returned in this response.")


class Get2ComplianceJobsResponse(BaseModel):
    data: Optional[List[ComplianceJob]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    meta: Optional[Meta1] = None


class Meta2(BaseModel):
    next_token: Optional[constr(min_length=1)] = Field(None, description="The next token.")  # type: ignore
    previous_token: Optional[constr(min_length=1)] = Field(None, description="The previous token.")  # type: ignore
    result_count: Optional[int] = Field(None, description="The number of results returned in this response.")


class Get2Insights28hrResponse(BaseModel):
    data: Optional[List[Engagement]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class Get2InsightsHistoricalResponse(BaseModel):
    data: Optional[List[Engagement]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class Meta8(BaseModel):
    result_count: Optional[int] = Field(None, description="The number of results returned in this response.")


class Meta9(BaseModel):
    next_token: Optional[constr(min_length=1)] = Field(None, description="The next token.")  # type: ignore
    previous_token: Optional[constr(min_length=1)] = Field(None, description="The previous token.")  # type: ignore
    result_count: Optional[int] = Field(None, description="The number of results returned in this response.")


class Meta11(BaseModel):
    result_count: Optional[int] = Field(None, description="The number of results returned in this response.")


class Get2TrendsByWoeidWoeidResponse(BaseModel):
    data: Optional[List[Trend]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class Meta12(BaseModel):
    newest_id: Optional[str] = Field(None, description="The newest id in this response.")
    next_token: Optional[constr(min_length=1)] = Field(None, description="The next token.")  # type: ignore
    oldest_id: Optional[str] = Field(None, description="The oldest id in this response.")
    total_tweet_count: Optional[int] = Field(None, description="The sum of results returned in this response.")


class Meta14(BaseModel):
    next_token: Optional[constr(min_length=1)] = Field(None, description="The next token.")  # type: ignore
    previous_token: Optional[constr(min_length=1)] = Field(None, description="The previous token.")  # type: ignore
    result_count: Optional[int] = Field(None, description="The number of results returned in this response.")


class Meta15(BaseModel):
    next_token: Optional[constr(min_length=1)] = Field(None, description="The next token.")  # type: ignore
    result_count: Optional[int] = Field(None, description="The number of results returned in this response.")


class Meta16(BaseModel):
    next_token: Optional[constr(min_length=1)] = Field(None, description="The next token.")  # type: ignore
    previous_token: Optional[constr(min_length=1)] = Field(None, description="The previous token.")  # type: ignore
    result_count: Optional[int] = Field(None, description="The number of results returned in this response.")


class Meta18(BaseModel):
    newest_id: Optional[str] = Field(None, description="The newest id in this response.")
    next_token: Optional[constr(min_length=1)] = Field(None, description="The next token.")  # type: ignore
    oldest_id: Optional[str] = Field(None, description="The oldest id in this response.")
    result_count: Optional[int] = Field(None, description="The number of results returned in this response.")


class Meta20(BaseModel):
    next_token: Optional[constr(min_length=1)] = Field(None, description="The next token.")  # type: ignore
    previous_token: Optional[constr(min_length=1)] = Field(None, description="The previous token.")  # type: ignore
    result_count: Optional[int] = Field(None, description="The number of results returned in this response.")


class Meta27(BaseModel):
    newest_id: Optional[str] = Field(None, description="The newest id in this response.")
    next_token: Optional[constr(min_length=1)] = Field(None, description="The next token.")  # type: ignore
    oldest_id: Optional[str] = Field(None, description="The oldest id in this response.")
    previous_token: Optional[constr(min_length=1)] = Field(None, description="The previous token.")  # type: ignore
    result_count: Optional[int] = Field(None, description="The number of results returned in this response.")


class Meta28(BaseModel):
    next_token: Optional[constr(min_length=1)] = Field(None, description="The next token.")  # type: ignore
    previous_token: Optional[constr(min_length=1)] = Field(None, description="The previous token.")  # type: ignore
    result_count: Optional[int] = Field(None, description="The number of results returned in this response.")


class Meta30(BaseModel):
    result_count: Optional[int] = Field(None, description="The number of results returned in this response.")


class Meta31(BaseModel):
    newest_id: Optional[str] = Field(None, description="The newest id in this response.")
    next_token: Optional[constr(min_length=1)] = Field(None, description="The next token.")  # type: ignore
    oldest_id: Optional[str] = Field(None, description="The oldest id in this response.")
    previous_token: Optional[constr(min_length=1)] = Field(None, description="The previous token.")  # type: ignore
    result_count: Optional[int] = Field(None, description="The number of results returned in this response.")


class Get2UsersPersonalizedTrendsResponse(BaseModel):
    data: Optional[List[PersonalizedTrend]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class Meta33(BaseModel):
    next_token: Optional[constr(min_length=1)] = Field(None, description="The next token.")  # type: ignore
    previous_token: Optional[constr(min_length=1)] = Field(None, description="The previous token.")  # type: ignore
    result_count: Optional[int] = Field(None, description="The number of results returned in this response.")


class Meta34(BaseModel):
    next_token: Optional[constr(min_length=1)] = Field(None, description="The next token.")  # type: ignore
    previous_token: Optional[constr(min_length=1)] = Field(None, description="The previous token.")  # type: ignore


class HashtagEntity(EntityIndicesInclusiveExclusive, HashtagFields):
    pass


class InvalidRequestProblem(Problem):
    errors: Optional[List[Error2]] = Field(None, min_length=1)


class InvalidRuleProblem(Problem):
    pass


class KillAllConnectionsResponse(BaseModel):
    data: Optional[Data5] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class LikeWithTweetAuthor(BaseModel):
    created_at: Optional[datetime] = Field(None, description="Creation time of the Tweet.", examples=["2021-01-06T18:40:40.000Z"])
    id: Optional[constr(pattern=r"^[A-Za-z0-9_]{1,40}$")] = Field(  # type: ignore
        None, description="The unique identifier of this Like.", examples=["8ba4f34e6235d905a46bac021d98e923"]
    )
    liked_tweet_id: Optional[constr(pattern=r"^[0-9]{1,19}$")] = Field(  # type: ignore
        None,
        description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["1346889436626259968"],
    )
    timestamp_ms: Optional[int] = Field(None, description="Timestamp in milliseconds of creation.")
    tweet_author_id: Optional[constr(pattern=r"^[0-9]{1,19}$")] = Field(  # type: ignore
        None,
        description="Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["2244994945"],
    )


class LikesComplianceStreamResponse2(BaseModel):
    errors: List[Problem] = Field(..., min_length=1)


class ListModel(BaseModel):
    created_at: Optional[datetime] = None
    description: Optional[str] = None
    follower_count: Optional[int] = None
    id: constr(pattern=r"^[0-9]{1,19}$") = Field(..., description="The unique identifier of this List.", examples=["1146654567674912769"])  # type: ignore
    member_count: Optional[int] = None
    name: str = Field(..., description="The name of this List.")
    owner_id: Optional[constr(pattern=r"^[0-9]{1,19}$")] = Field(  # type: ignore
        None,
        description="Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["2244994945"],
    )
    private: Optional[bool] = None


class ListAddUserRequest(BaseModel):
    user_id: constr(pattern=r"^[0-9]{1,19}$") = Field(  # type: ignore
        ...,
        description="Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["2244994945"],
    )


class Data6(BaseModel):
    id: constr(pattern=r"^[0-9]{1,19}$") = Field(..., description="The unique identifier of this List.", examples=["1146654567674912769"])  # type: ignore
    name: str = Field(..., description="The name of this List.")


class ListCreateResponse(BaseModel):
    data: Optional[Data6] = Field(None, description="A X List is a curated group of accounts.")
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class ListDeleteResponse(BaseModel):
    data: Optional[Data7] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class ListFollowedRequest(BaseModel):
    list_id: constr(pattern=r"^[0-9]{1,19}$") = Field(..., description="The unique identifier of this List.", examples=["1146654567674912769"])  # type: ignore


class ListFollowedResponse(BaseModel):
    data: Optional[Data8] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class ListMutateResponse(BaseModel):
    data: Optional[Data9] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class ListPinnedResponse(BaseModel):
    data: Optional[Data10] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class ListUnpinResponse(BaseModel):
    data: Optional[Data10] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class ListUpdateResponse(BaseModel):
    data: Optional[Data12] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class Media(BaseModel):
    height: Optional[conint(ge=0)] = Field(None, description="The height of the media in pixels.")  # type: ignore
    media_key: Optional[constr(pattern=r"^([0-9]+)_([0-9]+)$")] = Field(None, description="The Media Key identifier for this attachment.")  # type: ignore
    type: str
    width: Optional[conint(ge=0)] = Field(None, description="The width of the media in pixels.")  # type: ignore


class MediaUploadInitResponse(BaseModel):
    data: Optional[Data13] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class Data14(BaseModel):
    expires_after_secs: Optional[int] = Field(None, description="Number of seconds after which upload session expires.")
    id: Optional[constr(pattern=r"^[0-9]{1,19}$")] = Field(None, description="The unique identifier of this Media.", examples=["1146654567674912769"])  # type: ignore
    media_key: Optional[constr(pattern=r"^([0-9]+)_([0-9]+)$")] = Field(None, description="The Media Key identifier for this attachment.")  # type: ignore
    processing_info: Optional[ProcessingInfo] = None
    size: Optional[int] = Field(None, description="Size of the upload")


class MediaUploadStatusResponse(BaseModel):
    data: Optional[Data14] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class MentionFields(BaseModel):
    id: Optional[constr(pattern=r"^[0-9]{1,19}$")] = Field(  # type: ignore
        None,
        description="Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["2244994945"],
    )
    username: constr(pattern=r"^[A-Za-z0-9_]{1,20}$") = Field(..., description="The X handle (screen name) of this user.")  # type: ignore


class MetadataCreateRequest(BaseModel):
    allow_download_status: Optional[AllowDownloadStatus] = None
    alt_text: Optional[AltText] = None
    found_media_origin: Optional[FoundMediaOrigin] = None
    media_id: constr(pattern=r"^[0-9]{1,19}$") = Field(..., description="The unique identifier of this Media.", examples=["1146654567674912769"])  # type: ignore
    sticker_info: Optional[StickerInfo] = None
    upload_source: Optional[UploadSource] = None


class AssociatedMetadata(BaseModel):
    allow_download_status: Optional[AllowDownloadStatus] = None
    alt_text: Optional[AltText] = None
    found_media_origin: Optional[FoundMediaOrigin] = None
    sticker_info: Optional[StickerInfo] = None
    upload_source: Optional[UploadSource] = None


class Data15(BaseModel):
    associated_metadata: Optional[AssociatedMetadata] = None
    id: Optional[constr(pattern=r"^[0-9]{1,19}$")] = Field(None, description="The unique identifier of this Media.", examples=["1146654567674912769"])  # type: ignore


class MetadataCreateResponse(BaseModel):
    data: Optional[Data15] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class MuteUserMutationResponse(BaseModel):
    data: Optional[Data16] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class MuteUserRequest(BaseModel):
    target_user_id: constr(pattern=r"^[0-9]{1,19}$") = Field(  # type: ignore
        ...,
        description="Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["2244994945"],
    )


class NonCompliantRulesProblem(Problem):
    pass


class Note(BaseModel):
    classification: Optional[NoteClassification] = None
    created_at: Optional[datetime] = None
    deleted: Optional[bool] = Field(None, description="Whether the Community Note has been deleted or not.")
    id: constr(pattern=r"^[0-9]{1,19}$") = Field(..., description="The unique identifier of this Community Note.", examples=["1146654567674912769"])  # type: ignore
    rating_status: Optional[NoteRatingStatus] = None
    text: str = Field(..., description="The text summary in the Community Note.")


class Oauth1PermissionsProblem(Problem):
    pass


class OperationalDisconnectProblem(Problem):
    disconnect_type: Optional[DisconnectType] = None


class Photo(Media):
    alt_text: Optional[str] = None
    url: Optional[AnyUrl] = None


class Point(BaseModel):
    coordinates: List[float] = Field(
        ...,
        description="A [GeoJson Position](https://tools.ietf.org/html/rfc7946#section-3.1.1) in the format `[longitude,latitude]`.",
        examples=[[-105.18816086351444, 40.247749999999996]],
    )
    type: Type2 = Field(..., examples=["Point"])


class PollOption(BaseModel):
    label: constr(min_length=1, max_length=25) = Field(..., description="The text of a poll choice.")  # type: ignore
    position: int = Field(..., description="Position of this choice in the poll.")
    votes: int = Field(..., description="Number of users who voted for this choice.")


class Rule(BaseModel):
    id: Optional[constr(pattern=r"^[0-9]{1,19}$")] = Field(None, description="Unique identifier of this rule.", examples=["120897978112909812"])  # type: ignore
    tag: Optional[str] = Field(None, description="A tag meant for the labeling of user provided rules.", examples=["Non-retweeted coffee Posts"])
    value: str = Field(..., description="The filterlang value of the rule.", examples=["coffee -is:retweet"])


class RuleNoId(BaseModel):
    tag: Optional[str] = Field(None, description="A tag meant for the labeling of user provided rules.", examples=["Non-retweeted coffee Posts"])
    value: str = Field(..., description="The filterlang value of the rule.", examples=["coffee -is:retweet"])


class RulesLookupResponse(BaseModel):
    data: Optional[List[Rule]] = None
    meta: RulesResponseMetadata


class SearchCount(BaseModel):
    end: datetime = Field(..., description="The end time of the bucket.")
    start: datetime = Field(..., description="The start time of the bucket.")
    tweet_count: int = Field(..., description="The count for the bucket.")


class Space(BaseModel):
    created_at: Optional[datetime] = Field(None, description="Creation time of the Space.", examples=["2021-07-06T18:40:40.000Z"])
    creator_id: Optional[constr(pattern=r"^[0-9]{1,19}$")] = Field(  # type: ignore
        None,
        description="Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["2244994945"],
    )
    ended_at: Optional[datetime] = Field(None, description="End time of the Space.", examples=["2021-07-06T18:40:40.000Z"])
    host_ids: Optional[List[constr(pattern=r"^[0-9]{1,19}$")]] = Field(None, description="The user ids for the hosts of the Space.")  # type: ignore
    id: constr(pattern=r"^[a-zA-Z0-9]{1,13}$") = Field(..., description="The unique identifier of this Space.", examples=["1SLjjRYNejbKM"])  # type: ignore
    invited_user_ids: Optional[List[constr(pattern=r"^[0-9]{1,19}$")]] = Field(None, description="An array of user ids for people who were invited to a Space.")  # type: ignore
    is_ticketed: Optional[bool] = Field(None, description="Denotes if the Space is a ticketed Space.", examples=["false"])
    lang: Optional[str] = Field(None, description="The language of the Space.", examples=["en"])
    participant_count: Optional[int] = Field(None, description="The number of participants in a Space.", examples=[10])
    scheduled_start: Optional[datetime] = Field(
        None, description="A date time stamp for when a Space is scheduled to begin.", examples=["2021-07-06T18:40:40.000Z"]
    )
    speaker_ids: Optional[List[constr(pattern=r"^[0-9]{1,19}$")]] = Field(None, description="An array of user ids for people who were speakers in a Space.")  # type: ignore
    started_at: Optional[datetime] = Field(None, description="When the Space was started as a date string.", examples=["2021-7-14T04:35:55Z"])
    state: State1 = Field(..., description="The current state of the Space.", examples=["live"])
    subscriber_count: Optional[int] = Field(
        None, description="The number of people who have either purchased a ticket or set a reminder for this Space.", examples=[10]
    )
    title: Optional[str] = Field(None, description="The title of the Space.", examples=["Spaces are Awesome"])
    topics: Optional[List[Topic1]] = Field(None, description="The topics of a Space, as selected by its creator.")
    updated_at: Optional[datetime] = Field(None, description="When the Space was last updated.", examples=["2021-7-14T04:35:55Z"])


class SubtitleInfo(BaseModel):
    subtitles: Optional[List[Subtitles]] = Field(None, min_length=1)


class SubtitlesCreateRequest(BaseModel):
    media_category: Optional[MediaCategory] = None
    media_id: Optional[constr(pattern=r"^[0-9]{1,19}$")] = Field(None, description="The unique identifier of this Media.", examples=["1146654567674912769"])  # type: ignore
    subtitle_info: Optional[SubtitleInfo] = None


class Topic(BaseModel):
    description: Optional[str] = Field(None, description="The description of the given topic.", examples=["All about technology"])
    id: str = Field(..., description="Unique identifier of this Topic.")
    name: str = Field(..., description="The name of the given topic.", examples=["Technology"])


class Attachments1(BaseModel):
    media_keys: Optional[List[constr(pattern=r"^([0-9]+)_([0-9]+)$")]] = Field(  # type: ignore
        None, description="A list of Media Keys for each one of the media attachments (if media are attached).", min_length=1
    )
    media_source_tweet_id: Optional[List[constr(pattern=r"^[0-9]{1,19}$")]] = Field(  # type: ignore
        None,
        description="A list of Posts the media on this Tweet was originally posted in. For example, if the media on a tweet is re-used in another Tweet, this refers to the original, source Tweet..",
        min_length=1,
    )
    poll_ids: Optional[List[constr(pattern=r"^[0-9]{1,19}$")]] = Field(None, description="A list of poll IDs (if polls are attached).", min_length=1)  # type: ignore


class Geo1(BaseModel):
    coordinates: Optional[Point] = None
    place_id: Optional[str] = Field(None, description="The identifier for this place.", examples=["f7eb2fa2fea288b1"])


class ReferencedTweet1(BaseModel):
    id: constr(pattern=r"^[0-9]{1,19}$") = Field(  # type: ignore
        ...,
        description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["1346889436626259968"],
    )
    type: Type3


class Tweet1(BaseModel):
    author_id: constr(pattern=r"^[0-9]{1,19}$") = Field(  # type: ignore
        ...,
        description="Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["2244994945"],
    )
    id: constr(pattern=r"^[0-9]{1,19}$") = Field(  # type: ignore
        ...,
        description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["1346889436626259968"],
    )


class TweetComplianceSchema(BaseModel):
    event_at: datetime = Field(..., description="Event time.", examples=["2021-07-06T18:40:40.000Z"])
    quote_tweet_id: Optional[constr(pattern=r"^[0-9]{1,19}$")] = Field(  # type: ignore
        None,
        description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["1346889436626259968"],
    )
    tweet: Tweet1


class Media1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    media_ids: List[constr(pattern=r"^[0-9]{1,19}$")] = Field(  # type: ignore
        ..., description="A list of Media Ids to be attached to a created Tweet.", max_length=4, min_length=1
    )
    tagged_user_ids: Optional[List[constr(pattern=r"^[0-9]{1,19}$")]] = Field(  # type: ignore
        None, description="A list of User Ids to be tagged in the media for created Tweet.", max_length=10, min_length=0
    )


class Reply(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    exclude_reply_user_ids: Optional[List[constr(pattern=r"^[0-9]{1,19}$")]] = Field(  # type: ignore
        None, description="A list of User Ids to be excluded from the reply Tweet."
    )
    in_reply_to_tweet_id: constr(pattern=r"^[0-9]{1,19}$") = Field(  # type: ignore
        ...,
        description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["1346889436626259968"],
    )


class TweetCreateRequest(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    card_uri: Optional[str] = Field(
        None, description="Card Uri Parameter. This is mutually exclusive from Quote Tweet Id, Poll, Media, and Direct Message Deep Link."
    )
    community_id: Optional[constr(pattern=r"^[0-9]{1,19}$")] = Field(  # type: ignore
        None, description="The unique identifier of this Community.", examples=["1146654567674912769"]
    )
    direct_message_deep_link: Optional[str] = Field(None, description="Link to take the conversation from the public timeline to a private Direct Message.")
    for_super_followers_only: Optional[bool] = Field(False, description="Exclusive Tweet for super followers.")
    geo: Optional[Geo2] = Field(None, description="Place ID being attached to the Tweet for geo location.")
    media: Optional[Media1] = Field(
        None, description="Media information being attached to created Tweet. This is mutually exclusive from Quote Tweet Id, Poll, and Card URI."
    )
    nullcast: Optional[bool] = Field(
        False, description="Nullcasted (promoted-only) Posts do not appear in the public timeline and are not served to followers."
    )
    poll: Optional[Poll1] = Field(
        None, description="Poll options for a Tweet with a poll. This is mutually exclusive from Media, Quote Tweet Id, and Card URI."
    )
    quote_tweet_id: Optional[constr(pattern=r"^[0-9]{1,19}$")] = Field(  # type: ignore
        None,
        description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["1346889436626259968"],
    )
    reply: Optional[Reply] = Field(None, description="Tweet information of the Tweet being replied to.")
    reply_settings: Optional[ReplySettings2] = Field(None, description="Settings to indicate who can reply to the Tweet.")
    text: Optional[str] = Field(
        None,
        description="The content of the Tweet.",
        examples=[
            "Learn how to use the user Tweet timeline and user mention timeline endpoints in the X API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i"
        ],
    )


class Data19(BaseModel):
    id: constr(pattern=r"^[0-9]{1,19}$") = Field(  # type: ignore
        ...,
        description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["1346889436626259968"],
    )
    text: str = Field(
        ...,
        description="The content of the Tweet.",
        examples=[
            "Learn how to use the user Tweet timeline and user mention timeline endpoints in the X API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i"
        ],
    )


class TweetCreateResponse(BaseModel):
    data: Optional[Data19] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class TweetDeleteComplianceSchema(BaseModel):
    delete: TweetComplianceSchema


class TweetDropComplianceSchema(BaseModel):
    drop: TweetComplianceSchema


class Tweet2(BaseModel):
    id: constr(pattern=r"^[0-9]{1,19}$") = Field(  # type: ignore
        ...,
        description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["1346889436626259968"],
    )


class TweetEditComplianceObjectSchema(BaseModel):
    edit_tweet_ids: List[constr(pattern=r"^[0-9]{1,19}$")] = Field(..., min_length=1)  # type: ignore
    event_at: datetime = Field(..., description="Event time.", examples=["2021-07-06T18:40:40.000Z"])
    initial_tweet_id: constr(pattern=r"^[0-9]{1,19}$") = Field(  # type: ignore
        ...,
        description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["1346889436626259968"],
    )
    tweet: Tweet2


class TweetEditComplianceSchema(BaseModel):
    tweet_edit: TweetEditComplianceObjectSchema


class Tweet3(BaseModel):
    author_id: constr(pattern=r"^[0-9]{1,19}$") = Field(  # type: ignore
        ...,
        description="Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["2244994945"],
    )
    id: constr(pattern=r"^[0-9]{1,19}$") = Field(  # type: ignore
        ...,
        description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["1346889436626259968"],
    )


class TweetNotice(BaseModel):
    application: str = Field(..., description="If the label is being applied or removed. Possible values are ‘apply’ or ‘remove’.", examples=["apply"])
    details: Optional[str] = Field(None, description="Information shown on the Tweet label")
    event_at: datetime = Field(..., description="Event time.", examples=["2021-07-06T18:40:40.000Z"])
    event_type: str = Field(..., description="The type of label on the Tweet", examples=["misleading"])
    extended_details_url: Optional[str] = Field(None, description="Link to more information about this kind of label")
    label_title: Optional[str] = Field(None, description="Title/header of the Tweet label")
    tweet: Tweet3


class TweetNoticeSchema(BaseModel):
    public_tweet_notice: TweetNotice


class TweetTakedownComplianceSchema(BaseModel):
    event_at: datetime = Field(..., description="Event time.", examples=["2021-07-06T18:40:40.000Z"])
    quote_tweet_id: Optional[constr(pattern=r"^[0-9]{1,19}$")] = Field(  # type: ignore
        None,
        description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["1346889436626259968"],
    )
    tweet: Tweet3
    withheld_in_countries: List[constr(pattern=r"^[A-Za-z]{2}$")] = Field(..., min_length=0)  # type: ignore


class TweetUndropComplianceSchema(BaseModel):
    undrop: TweetComplianceSchema


class TweetUnviewable(BaseModel):
    application: str = Field(..., description="If the label is being applied or removed. Possible values are ‘apply’ or ‘remove’.", examples=["apply"])
    event_at: datetime = Field(..., description="Event time.", examples=["2021-07-06T18:40:40.000Z"])
    tweet: Tweet3


class TweetUnviewableSchema(BaseModel):
    public_tweet_unviewable: TweetUnviewable


class TweetWithheldComplianceSchema(BaseModel):
    withheld: TweetTakedownComplianceSchema


class Favorite(BaseModel):
    id: constr(pattern=r"^[0-9]{1,19}$") = Field(  # type: ignore
        ...,
        description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["1346889436626259968"],
    )
    user_id: constr(pattern=r"^[0-9]{1,19}$") = Field(  # type: ignore
        ...,
        description="Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["2244994945"],
    )


class UnlikeComplianceSchema(BaseModel):
    event_at: datetime = Field(..., description="Event time.", examples=["2021-07-06T18:40:40.000Z"])
    favorite: Favorite


class UrlFields(BaseModel):
    description: Optional[str] = Field(None, description="Description of the URL landing page.", examples=["This is a description of the website."])
    display_url: Optional[str] = Field(None, description="The URL as displayed in the X client.", examples=["twittercommunity.com/t/introducing-…"])
    expanded_url: Optional[AnyUrl] = Field(None, description="A validly formatted URL.", examples=["https://developer.twitter.com/en/docs/twitter-api"])
    images: Optional[List[UrlImage]] = Field(None, min_length=1)
    media_key: Optional[constr(pattern=r"^([0-9]+)_([0-9]+)$")] = Field(None, description="The Media Key identifier for this attachment.")  # type: ignore
    status: Optional[conint(ge=100, le=599)] = Field(None, description="HTTP Status Code.")  # type: ignore
    title: Optional[str] = Field(None, description="Title of the page the URL points to.", examples=["Introducing the v2 follow lookup endpoints"])
    unwound_url: Optional[AnyUrl] = Field(
        None, description="Fully resolved url.", examples=["https://twittercommunity.com/t/introducing-the-v2-follow-lookup-endpoints/147118"]
    )
    url: str = Field(..., description="A validly formatted URL.", examples=["https://developer.twitter.com/en/docs/twitter-api"])


class DailyProjectUsage(BaseModel):
    project_id: Optional[int] = Field(None, description="The unique identifier for this project")
    usage: Optional[List[UsageFields]] = Field(None, description="The usage value", min_length=1)


class Usage(BaseModel):
    cap_reset_day: Optional[int] = Field(None, description="Number of days left for the Tweet cap to reset")
    daily_client_app_usage: Optional[List[ClientAppUsage]] = Field(
        None, description="The daily usage breakdown for each Client Application a project", min_length=1
    )
    daily_project_usage: Optional[DailyProjectUsage] = Field(None, description="The daily usage breakdown for a project")
    project_cap: Optional[int] = Field(None, description="Total number of Posts that can be read in this project per month")
    project_id: Optional[str] = Field(None, description="The unique identifier for this project")
    project_usage: Optional[int] = Field(None, description="The number of Posts read in this project")


class Affiliation(BaseModel):
    badge_url: Optional[AnyUrl] = Field(None, description="The badge URL corresponding to the affiliation.")
    description: Optional[str] = Field(None, description="The description of the affiliation.")
    url: Optional[AnyUrl] = Field(None, description="The URL, if available, to details about an affiliation.")
    user_id: Optional[List[constr(pattern=r"^[0-9]{1,19}$")]] = Field(None, min_length=1)  # type: ignore


class UserComplianceSchema(BaseModel):
    event_at: datetime = Field(..., description="Event time.", examples=["2021-07-06T18:40:40.000Z"])
    user: User2


class UserDeleteComplianceSchema(BaseModel):
    user_delete: UserComplianceSchema


class UserProfileModificationComplianceSchema(BaseModel):
    user_profile_modification: UserProfileModificationObjectSchema


class UserProtectComplianceSchema(BaseModel):
    user_protect: UserComplianceSchema


class UserSuspendComplianceSchema(BaseModel):
    user_suspend: UserComplianceSchema


class UserUndeleteComplianceSchema(BaseModel):
    user_undelete: UserComplianceSchema


class UserUnprotectComplianceSchema(BaseModel):
    user_unprotect: UserComplianceSchema


class UserUnsuspendComplianceSchema(BaseModel):
    user_unsuspend: UserComplianceSchema


class Video(Media):
    duration_ms: Optional[int] = None
    non_public_metrics: Optional[NonPublicMetrics1] = Field(None, description="Nonpublic engagement metrics for the Media at the time of the request.")
    organic_metrics: Optional[OrganicMetrics1] = Field(None, description="Organic nonpublic engagement metrics for the Media at the time of the request.")
    preview_image_url: Optional[AnyUrl] = None
    promoted_metrics: Optional[PromotedMetrics1] = Field(None, description="Promoted nonpublic engagement metrics for the Media at the time of the request.")
    public_metrics: Optional[PublicMetrics2] = Field(None, description="Engagement metrics for the Media at the time of the request.")
    variants: Optional[List[Variant]] = Field(None, description="An array of all available variants of the media.")


class AddOrDeleteRulesResponse(BaseModel):
    data: Optional[List[Rule]] = Field(None, description="All user-specified stream filtering rules that were created.")
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    meta: RulesResponseMetadata


class AddRulesRequest(BaseModel):
    add: List[RuleNoId]


class AnimatedGif(Media):
    preview_image_url: Optional[AnyUrl] = None
    variants: Optional[List[Variant]] = Field(None, description="An array of all available variants of the media.")


class Geo(BaseModel):
    bbox: List[confloat(ge=-180.0, le=180.0)] = Field(..., examples=[[-105.193475, 39.60973, -105.053164, 39.761974]], max_length=4, min_length=4)  # type: ignore
    geometry: Optional[Point] = None
    properties: Dict[str, Any]
    type: Type1


class Get2NotesResponse(BaseModel):
    data: Optional[Note] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class Get2TweetsCountsAllResponse(BaseModel):
    data: Optional[List[SearchCount]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    meta: Optional[Meta12] = None


class Get2TweetsCountsRecentResponse(BaseModel):
    data: Optional[List[SearchCount]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    meta: Optional[Meta12] = None


class Get2UsageTweetsResponse(BaseModel):
    data: Optional[Usage] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class LikeComplianceSchema(BaseModel):
    delete: UnlikeComplianceSchema


class LikesComplianceStreamResponse1(BaseModel):
    data: LikeComplianceSchema


class LikesComplianceStreamResponse(RootModel[Union[LikesComplianceStreamResponse1, LikesComplianceStreamResponse2]]):
    root: Union[LikesComplianceStreamResponse1, LikesComplianceStreamResponse2] = Field(..., description="Likes compliance stream events.")


class MentionEntity(EntityIndicesInclusiveExclusive, MentionFields):
    pass


class Place(BaseModel):
    contained_within: Optional[List[str]] = Field(None, min_length=1)
    country: Optional[str] = Field(None, description="The full name of the county in which this place exists.", examples=["United States"])
    country_code: Optional[constr(pattern=r"^[A-Za-z]{2}$")] = Field(None, description="A two-letter ISO 3166-1 alpha-2 country code.", examples=["US"])  # type: ignore
    full_name: str = Field(..., description="The full name of this place.", examples=["Lakewood, CO"])
    geo: Optional[Geo] = None
    id: str = Field(..., description="The identifier for this place.", examples=["f7eb2fa2fea288b1"])
    name: Optional[str] = Field(None, description="The human readable name of this place.", examples=["Lakewood"])
    place_type: Optional[PlaceType] = None


class Poll(BaseModel):
    duration_minutes: Optional[conint(ge=5, le=10080)] = None  # type: ignore
    end_datetime: Optional[datetime] = None
    id: constr(pattern=r"^[0-9]{1,19}$") = Field(..., description="Unique identifier of this poll.", examples=["1365059861688410112"])  # type: ignore
    options: List[PollOption] = Field(..., max_length=4, min_length=2)
    voting_status: Optional[VotingStatus] = None


class RulesCount(BaseModel):
    all_project_client_apps: Optional[List[AppRulesCount]] = Field(None, description="Client App Rule Counts for all applications in the project")
    cap_per_client_app: Optional[int] = Field(None, description="Cap of number of rules allowed per client application")
    cap_per_project: Optional[int] = Field(None, description="Cap of number of rules allowed per project")
    client_app_rules_count: Optional[AppRulesCount] = None
    project_rules_count: Optional[int] = Field(None, description="Number of rules for project")


class TweetComplianceStreamResponse1(BaseModel):
    data: Union[
        TweetDeleteComplianceSchema, TweetWithheldComplianceSchema, TweetDropComplianceSchema, TweetUndropComplianceSchema, TweetEditComplianceSchema
    ] = Field(..., description="Tweet compliance data.")


class TweetComplianceStreamResponse(RootModel[Union[TweetComplianceStreamResponse1, TweetComplianceStreamResponse2]]):
    root: Union[TweetComplianceStreamResponse1, TweetComplianceStreamResponse2] = Field(..., description="Tweet compliance stream events.")


class TweetLabelStreamResponse1(BaseModel):
    data: Union[TweetNoticeSchema, TweetUnviewableSchema] = Field(..., description="Tweet label data.")


class TweetLabelStreamResponse(RootModel[Union[TweetLabelStreamResponse1, TweetLabelStreamResponse2]]):
    root: Union[TweetLabelStreamResponse1, TweetLabelStreamResponse2] = Field(..., description="Tweet label stream events.")


class UrlEntity(EntityIndicesInclusiveExclusive, UrlFields):
    pass


class UrlEntityDm(EntityIndicesInclusiveExclusive, UrlFields):
    pass


class Url1(BaseModel):
    urls: Optional[List[UrlEntity]] = Field(None, min_length=1)


class UserComplianceStreamResponse1(BaseModel):
    data: Union[
        UserProtectComplianceSchema,
        UserUnprotectComplianceSchema,
        UserDeleteComplianceSchema,
        UserUndeleteComplianceSchema,
        UserSuspendComplianceSchema,
        UserUnsuspendComplianceSchema,
        UserWithheldComplianceSchema,
        UserScrubGeoSchema,
        UserProfileModificationComplianceSchema,
    ] = Field(..., description="User compliance data.")


class UserComplianceStreamResponse(RootModel[Union[UserComplianceStreamResponse1, UserComplianceStreamResponse2]]):
    root: Union[UserComplianceStreamResponse1, UserComplianceStreamResponse2] = Field(..., description="User compliance stream events.")


class AddOrDeleteRulesRequest(RootModel[Union[AddRulesRequest, DeleteRulesRequest]]):
    root: Union[AddRulesRequest, DeleteRulesRequest]


class CreateAttachmentsMessageRequest(BaseModel):
    attachments: List[DmMediaAttachment] = Field(..., description="Attachments to a DM Event.")
    text: Optional[constr(min_length=1)] = Field(None, description="Text of the message.")  # type: ignore


class CreateTextMessageRequest(BaseModel):
    attachments: Optional[List[DmMediaAttachment]] = Field(None, description="Attachments to a DM Event.")
    text: constr(min_length=1) = Field(..., description="Text of the message.")  # type: ignore


class DmEvent(BaseModel):
    attachments: Optional[Attachments] = Field(None, description="Specifies the type of attachments (if any) present in this DM.")
    cashtags: Optional[List[CashtagEntity]] = Field(None, min_length=1)
    created_at: Optional[datetime] = None
    dm_conversation_id: Optional[constr(pattern=r"^([0-9]{1,19}-[0-9]{1,19}|[0-9]{15,19})$")] = Field(  # type: ignore
        None,
        description="Unique identifier of a DM conversation. This can either be a numeric string, or a pair of numeric strings separated by a '-' character in the case of one-on-one DM Conversations.",
        examples=["123123123-456456456"],
    )
    event_type: str = Field(..., examples=["MessageCreate"])
    hashtags: Optional[List[HashtagEntity]] = Field(None, min_length=1)
    id: constr(pattern=r"^[0-9]{1,19}$") = Field(..., description="Unique identifier of a DM Event.", examples=["1146654567674912769"])  # type: ignore
    mentions: Optional[List[MentionEntity]] = Field(None, min_length=1)
    participant_ids: Optional[List[constr(pattern=r"^[0-9]{1,19}$")]] = Field(  # type: ignore
        None, description="A list of participants for a ParticipantsJoin or ParticipantsLeave event_type.", min_length=1
    )
    referenced_tweets: Optional[List[ReferencedTweet]] = Field(None, description="A list of Posts this DM refers to.", min_length=1)
    sender_id: Optional[constr(pattern=r"^[0-9]{1,19}$")] = Field(  # type: ignore
        None,
        description="Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["2244994945"],
    )
    text: Optional[str] = None
    urls: Optional[List[UrlEntityDm]] = Field(None, min_length=1)


class FullTextEntities(BaseModel):
    annotations: Optional[List[Annotation]] = Field(None, min_length=1)
    cashtags: Optional[List[CashtagEntity]] = Field(None, min_length=1)
    hashtags: Optional[List[HashtagEntity]] = Field(None, min_length=1)
    mentions: Optional[List[MentionEntity]] = Field(None, min_length=1)
    urls: Optional[List[UrlEntity]] = Field(None, min_length=1)


class Get2TweetsSearchStreamRulesCountsResponse(BaseModel):
    data: Optional[RulesCount] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)


class Entities(BaseModel):
    cashtags: Optional[List[CashtagEntity]] = Field(None, min_length=1)
    hashtags: Optional[List[HashtagEntity]] = Field(None, min_length=1)
    mentions: Optional[List[MentionEntity]] = Field(None, min_length=1)
    urls: Optional[List[UrlEntity]] = Field(None, min_length=1)


class NoteTweet(BaseModel):
    entities: Optional[Entities] = None
    text: Optional[str] = Field(
        None,
        description="The note content of the Tweet.",
        examples=[
            "Learn how to use the user Tweet timeline and user mention timeline endpoints in the X API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i"
        ],
    )


class Tweet(BaseModel):
    attachments: Optional[Attachments1] = Field(None, description="Specifies the type of attachments (if any) present in this Tweet.")
    author_id: Optional[constr(pattern=r"^[0-9]{1,19}$")] = Field(  # type: ignore
        None,
        description="Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["2244994945"],
    )
    community_id: Optional[constr(pattern=r"^[0-9]{1,19}$")] = Field(  # type: ignore
        None, description="The unique identifier of this Community.", examples=["1146654567674912769"]
    )
    context_annotations: Optional[List[ContextAnnotation]] = Field(None, min_length=1)
    conversation_id: Optional[constr(pattern=r"^[0-9]{1,19}$")] = Field(  # type: ignore
        None,
        description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["1346889436626259968"],
    )
    created_at: Optional[datetime] = Field(None, description="Creation time of the Tweet.", examples=["2021-01-06T18:40:40.000Z"])
    edit_controls: Optional[EditControls] = None
    edit_history_tweet_ids: Optional[List[constr(pattern=r"^[0-9]{1,19}$")]] = Field(None, description="A list of Tweet Ids in this Tweet chain.", min_length=1)  # type: ignore
    entities: Optional[FullTextEntities] = None
    geo: Optional[Geo1] = Field(None, description="The location tagged on the Tweet, if the user provided one.")
    id: Optional[constr(pattern=r"^[0-9]{1,19}$")] = Field(  # type: ignore
        None,
        description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["1346889436626259968"],
    )
    in_reply_to_user_id: Optional[constr(pattern=r"^[0-9]{1,19}$")] = Field(  # type: ignore
        None,
        description="Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["2244994945"],
    )
    lang: Optional[str] = Field(None, description="Language of the Tweet, if detected by X. Returned as a BCP47 language tag.", examples=["en"])
    non_public_metrics: Optional[NonPublicMetrics] = Field(None, description="Nonpublic engagement metrics for the Tweet at the time of the request.")
    note_tweet: Optional[NoteTweet] = Field(None, description="The full-content of the Tweet, including text beyond 280 characters.")
    organic_metrics: Optional[OrganicMetrics] = Field(None, description="Organic nonpublic engagement metrics for the Tweet at the time of the request.")
    possibly_sensitive: Optional[bool] = Field(
        None, description="Indicates if this Tweet contains URLs marked as sensitive, for example content suitable for mature audiences.", examples=[False]
    )
    promoted_metrics: Optional[PromotedMetrics] = Field(None, description="Promoted nonpublic engagement metrics for the Tweet at the time of the request.")
    public_metrics: Optional[PublicMetrics] = Field(None, description="Engagement metrics for the Tweet at the time of the request.")
    referenced_tweets: Optional[List[ReferencedTweet1]] = Field(
        None,
        description="A list of Posts this Tweet refers to. For example, if the parent Tweet is a Retweet, a Quoted Tweet or a Reply, it will include the related Tweet referenced to by its parent.",
        min_length=1,
    )
    reply_settings: Optional[ReplySettingsWithVerifiedUsers] = None
    scopes: Optional[Scopes] = Field(None, description="The scopes for this tweet")
    source: Optional[str] = Field(None, description="This is deprecated.")
    text: Optional[str] = Field(
        None,
        description="The content of the Tweet.",
        examples=[
            "Learn how to use the user Tweet timeline and user mention timeline endpoints in the X API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i"
        ],
    )
    username: Optional[constr(pattern=r"^[A-Za-z0-9_]{1,20}$")] = Field(None, description="The X handle (screen name) of this user.")  # type: ignore
    withheld: Optional[TweetWithheld] = None


class Entities1(BaseModel):
    description: Optional[FullTextEntities] = None
    url: Optional[Url1] = Field(None, description="Expanded details for the URL specified in the User's profile, with start and end indices.")


class User(BaseModel):
    affiliation: Optional[Affiliation] = Field(None, description="Metadata about a user's affiliation.")
    connection_status: Optional[List[ConnectionStatu]] = Field(
        None, description="Returns detailed information about the relationship between two users.", min_length=0
    )
    created_at: Optional[datetime] = Field(None, description="Creation time of this User.")
    description: Optional[str] = Field(None, description="The text of this User's profile description (also known as bio), if the User provided one.")
    entities: Optional[Entities1] = Field(None, description="A list of metadata found in the User's profile description.")
    id: constr(pattern=r"^[0-9]{1,19}$") = Field(  # type: ignore
        ...,
        description="Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["2244994945"],
    )
    location: Optional[str] = Field(
        None,
        description="The location specified in the User's profile, if the User provided one. As this is a freeform value, it may not indicate a valid location, but it may be fuzzily evaluated when performing searches with location queries.",
    )
    most_recent_tweet_id: Optional[constr(pattern=r"^[0-9]{1,19}$")] = Field(  # type: ignore
        None,
        description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["1346889436626259968"],
    )
    name: str = Field(..., description="The friendly name of this User, as shown on their profile.")
    pinned_tweet_id: Optional[constr(pattern=r"^[0-9]{1,19}$")] = Field(  # type: ignore
        None,
        description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.",
        examples=["1346889436626259968"],
    )
    profile_banner_url: Optional[str] = Field(None, description="The URL to the profile banner for this User.")
    profile_image_url: Optional[str] = Field(None, description="The URL to the profile image for this User.")
    protected: Optional[bool] = Field(
        None, description="Indicates if this User has chosen to protect their Posts (in other words, if this User's Posts are private)."
    )
    public_metrics: Optional[PublicMetrics1] = Field(None, description="A list of metrics for this User.")
    receives_your_dm: Optional[bool] = Field(None, description="Indicates if you can send a DM to this User")
    subscription_type: Optional[SubscriptionType] = Field(
        None, description="The X Blue subscription type of the user, eg: Basic, Premium, PremiumPlus or None."
    )
    url: Optional[str] = Field(None, description="The URL specified in the User's profile.")
    username: constr(pattern=r"^[A-Za-z0-9_]{1,20}$") = Field(..., description="The X handle (screen name) of this user.")  # type: ignore
    verified: Optional[bool] = Field(None, description="Indicate if this User is a verified X User.")
    verified_type: Optional[VerifiedType] = Field(None, description="The X Blue verified type of the user, eg: blue, government, business or none.")
    withheld: Optional[UserWithheld] = None


class Expansions(BaseModel):
    media: Optional[List[Media]] = Field(None, min_length=1)
    places: Optional[List[Place]] = Field(None, min_length=1)
    polls: Optional[List[Poll]] = Field(None, min_length=1)
    topics: Optional[List[Topic]] = Field(None, min_length=1)
    tweets: Optional[List[Tweet]] = Field(None, min_length=1)
    users: Optional[List[User]] = Field(None, min_length=1)


class FilteredStreamingTweetResponse(BaseModel):
    data: Optional[Tweet] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    matching_rules: Optional[List[MatchingRule]] = Field(None, description="The list of rules which matched the Tweet")


class Get2DmConversationsIdDmEventsResponse(BaseModel):
    data: Optional[List[DmEvent]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta2] = None


class Get2DmConversationsWithParticipantIdDmEventsResponse(BaseModel):
    data: Optional[List[DmEvent]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta2] = None


class Get2DmEventsEventIdResponse(BaseModel):
    data: Optional[DmEvent] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2DmEventsResponse(BaseModel):
    data: Optional[List[DmEvent]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta2] = None


class Get2LikesFirehoseStreamResponse(BaseModel):
    data: Optional[LikeWithTweetAuthor] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2LikesSample10StreamResponse(BaseModel):
    data: Optional[LikeWithTweetAuthor] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2ListsIdFollowersResponse(BaseModel):
    data: Optional[List[User]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta2] = None


class Get2ListsIdMembersResponse(BaseModel):
    data: Optional[List[User]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta2] = None


class Get2ListsIdResponse(BaseModel):
    data: Optional[ListModel] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2ListsIdTweetsResponse(BaseModel):
    data: Optional[List[Tweet]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta2] = None


class Get2SpacesByCreatorIdsResponse(BaseModel):
    data: Optional[List[Space]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta8] = None


class Get2SpacesIdBuyersResponse(BaseModel):
    data: Optional[List[User]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta9] = None


class Get2SpacesIdResponse(BaseModel):
    data: Optional[Space] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2SpacesIdTweetsResponse(BaseModel):
    data: Optional[List[Tweet]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta9] = None


class Get2SpacesResponse(BaseModel):
    data: Optional[List[Space]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2SpacesSearchResponse(BaseModel):
    data: Optional[List[Space]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta11] = None


class Get2TweetsFirehoseStreamLangEnResponse(BaseModel):
    data: Optional[Tweet] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2TweetsFirehoseStreamLangJaResponse(BaseModel):
    data: Optional[Tweet] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2TweetsFirehoseStreamLangKoResponse(BaseModel):
    data: Optional[Tweet] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2TweetsFirehoseStreamLangPtResponse(BaseModel):
    data: Optional[Tweet] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2TweetsFirehoseStreamResponse(BaseModel):
    data: Optional[Tweet] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2TweetsIdLikingUsersResponse(BaseModel):
    data: Optional[List[User]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta14] = None


class Get2TweetsIdQuoteTweetsResponse(BaseModel):
    data: Optional[List[Tweet]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta15] = None


class Get2TweetsIdResponse(BaseModel):
    data: Optional[Tweet] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2TweetsIdRetweetedByResponse(BaseModel):
    data: Optional[List[User]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta16] = None


class Get2TweetsIdRetweetsResponse(BaseModel):
    data: Optional[List[Tweet]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta16] = None


class Get2TweetsResponse(BaseModel):
    data: Optional[List[Tweet]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2TweetsSample10StreamResponse(BaseModel):
    data: Optional[Tweet] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2TweetsSampleStreamResponse(BaseModel):
    data: Optional[Tweet] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2TweetsSearchAllResponse(BaseModel):
    data: Optional[List[Tweet]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta18] = None


class Get2TweetsSearchRecentResponse(BaseModel):
    data: Optional[List[Tweet]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta18] = None


class Get2TweetsSearchStreamResponse(BaseModel):
    data: Optional[Tweet] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2UsersByResponse(BaseModel):
    data: Optional[List[User]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2UsersByUsernameUsernameResponse(BaseModel):
    data: Optional[User] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2UsersIdBlockingResponse(BaseModel):
    data: Optional[List[User]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta20] = None


class Get2UsersIdBookmarksResponse(BaseModel):
    data: Optional[List[Tweet]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta20] = None


class Get2UsersIdFollowedListsResponse(BaseModel):
    data: Optional[List[ListModel]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta20] = None


class Get2UsersIdFollowersResponse(BaseModel):
    data: Optional[List[User]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta20] = None


class Get2UsersIdFollowingResponse(BaseModel):
    data: Optional[List[User]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta20] = None


class Get2UsersIdLikedTweetsResponse(BaseModel):
    data: Optional[List[Tweet]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta20] = None


class Get2UsersIdListMembershipsResponse(BaseModel):
    data: Optional[List[ListModel]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta20] = None


class Get2UsersIdMentionsResponse(BaseModel):
    data: Optional[List[Tweet]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta27] = None


class Get2UsersIdMutingResponse(BaseModel):
    data: Optional[List[User]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta28] = None


class Get2UsersIdOwnedListsResponse(BaseModel):
    data: Optional[List[ListModel]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta28] = None


class Get2UsersIdPinnedListsResponse(BaseModel):
    data: Optional[List[ListModel]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta30] = None


class Get2UsersIdResponse(BaseModel):
    data: Optional[User] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2UsersIdTimelinesReverseChronologicalResponse(BaseModel):
    data: Optional[List[Tweet]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta31] = None


class Get2UsersIdTweetsResponse(BaseModel):
    data: Optional[List[Tweet]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta31] = None


class Get2UsersMeResponse(BaseModel):
    data: Optional[User] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2UsersRepostsOfMeResponse(BaseModel):
    data: Optional[List[Tweet]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta33] = None


class Get2UsersResponse(BaseModel):
    data: Optional[List[User]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class Get2UsersSearchResponse(BaseModel):
    data: Optional[List[User]] = Field(None, min_length=1)
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None
    meta: Optional[Meta34] = None


class StreamingLikeResponseV2(BaseModel):
    data: Optional[LikeWithTweetAuthor] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class StreamingTweetResponse(BaseModel):
    data: Optional[Tweet] = None
    errors: Optional[List[Problem]] = Field(None, min_length=1)
    includes: Optional[Expansions] = None


class CreateDmConversationRequest(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    conversation_type: ConversationType = Field(..., description="The conversation type that is being created.")
    message: Union[CreateTextMessageRequest, CreateAttachmentsMessageRequest]
    participant_ids: List[constr(pattern=r"^[0-9]{1,19}$")] = Field(..., description="Participants for the DM Conversation.")  # type: ignore
